c
string.length
string.count
string
c
val_one.method(a).(val_two).to_s(2).to_i(2)
a = '>>'
c
(val_one << 2).to_s(2).to_i(2)
(val_one << 2).to_s(2)
val_two
(val_one << val_two).to_s(2)
(val_one << val_two).to_s(2).to_i(2)
val_one
instructions
c
(val_one | val_two).to_s(2).to_i(2)
(val_one & val_two).to_s(2).to_i(2)
val_two
val_one
c
@data[instructions[2]]
@data[instructions[0]]
instructions[-1]
instructions[1]
c
@data
@data[key_name] = value
value
key_name
c
key_name
bit.gsub!(/[10]/,'1' => '0', '0' => '1').to_i(2)
bit = convert_to_bit @data[instructions[1]].to_i
convert_to_bit @data[instructions[1]].to_i
@data[instructions[1]].to_i
@data[instructions[1]]
instructions[1]
@data
c
instructions
instructions[1]
bit = convert_to_bit instructions[1]
@data
c
instructions
@data
c
@data
exit
rspec --format=progress --no-profile day_7/solution_spec.rb:23
bit_converter
instructions
@data
data
c
bit_converter.data
c
BitConverter.data
c
@data
c
 @data[key_name] = value
c
@data
@data[key_name] = value
c
value = instructions[1]
length == 3
length
length = instructions.length
key_name = instructions[-1]
instructions = instructions.split(' ')
c
instructions
length == 3
length
c
3 === length
length
c
instructions.length.class
instructions.length
instructions
c
instructions.length
instructions
c
@x
x
instance_variable_set("@#{instructions[-1]}",instructions[1].to_i)
instance_variable_set("@#{instructions[-1]}",instructions[1].to)
instance_variable_set("@#{instructions[-1]}")
"@#{"x"}" = '123'
@#{"x"} = '123'
x
#{"x"} = '123'
var_name.to_sym = '123'
var_name.to_sym
var_name
var_name.to_sym = '123'.to_i
var_name = instructions[-1]
instructions[-1]
instruction[-1]
instructions.split(' ').length
instructions.split(' ')
instructions.length
instructions
c
BitConverter.process('123 -> x')
BitConverter.process('123 -> x
continue
BitConverter.new(456).value
